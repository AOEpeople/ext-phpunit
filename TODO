Have a closer look at http://phpunit.de/ticket/75

set_error_handler (lib/div extensions , dam).

'open in new window' does not work as it should. http://bugs.typo3.org/view.php?id=6971

Widget to choose tests from. http://bugs.typo3.org/view.php?id=6973

Add button '[(re-) run this test only]'. http://bugs.typo3.org/view.php?id=6972

Write current test and test-suite in/at progress-bar. http://bugs.typo3.org/view.php?id=6974

Show result of each test in each step in the progress-bar. http://bugs.typo3.org/view.php?id=6975

Have a progress-bar for each test-suite..? http://bugs.typo3.org/view.php?id=6976

Mark errors red. http://bugs.typo3.org/view.php?id=6977

Add in the manual that pear 2.3.5 or higher is needed. Make sure ext_emconf.php suggests pear extension (min. version 2.3.5). Create test for it in 'About'. http://bugs.typo3.org/view.php?id=6978

Longer term goals:
- Make some convenience functions in the tx_phpunit class, such as front-end simulation as a setup/fixture. http://bugs.typo3.org/view.php?id=6979
- Document how to work with PHPUnderControl, i.e. run you tests from the commandline in an automated way. http://bugs.typo3.org/view.php?id=6980
- (Maybe) support acceptance testing with selenium in a nice and documented way. http://bugs.typo3.org/view.php?id=6981
- Document all the ways you can have tests lying around, which tests other stuff. http://bugs.typo3.org/view.php?id=6982
- Move contents of Changelog to af NEWS file and setup precommit hook to svn, so that Changelog becomes excatly that (and acquire good karma point from Stallman ;-).

- Straighten out the code, so that it is less of a mess! http://bugs.typo3.org/view.php?id=6983

- Make sure phpunit works with latest Typo3 4.2. http://bugs.typo3.org/view.php?id=6984

- Make it possible to filter on success/failure/error and maybe also testsuite/groups. http://bugs.typo3.org/view.php?id=6986

- Implement choosing of testsuites / groups. http://bugs.typo3.org/view.php?id=6965
-----------------------
Elmar Hinz: http://bugs.typo3.org/view.php?id=6987

[TYPO3-dev] TypoScript template for unit testing

Hello,

for unit tests you need invariant test setups. This example shows a way
to set a defined TS template, that does not depend on a page in the
pagetree. It simply loads the TS from css_styled_content. 

It works with the unit test extension phpunit. An empty
$GLOBALS['TSFE']->tmpl has already been created by the parent class.


class tx_example_testcase extends tx_phpunit_testcase {

        protected function setup() {
                require_once(PATH_t3lib.'class.t3lib_tsparser.php');
                $dir = 'EXT:css_styled_content/static/';
                $dir = t3lib_div::getFileAbsFileName($dir);
                $constants = join('', file($dir . 'constants.txt'));
                $TSparserObject = t3lib_div::makeInstance('t3lib_tsparser');
                $TSparserObject->parse($constants);
                $constants = $TSparserObject->setup;
                $this->makeFlatConstantKeys($constants);
                $setup = join('', file($dir . 'setup.txt'));
                $setup = $this->substituteConstants($setup);
                $TSparserObject->parse($setup);
                $GLOBALS['TSFE']->tmpl->setup = $TSparserObject->setup;
        }

        protected function makeFlatConstantKeys($constantArray) {
                foreach($constantArray as $key => $value) {
                        $tempKey = $this->flatConstantKey;
                        $this->flatConstantKey.= $key;
                        if(is_array($value)) $this->makeflatConstantKeys($value);
                        else $this->flatConstants[$this->flatConstantKey] = $value;
                        $this->flatConstantKey = $tempKey;
                }
        }
        
        protected function substituteConstants($line) {
                return preg_replace_callback('/\{\$(.[^}]+)\}/m',
array($this, 'substituteConstantsCallBack'), $line);
        }

        protected function substituteConstantsCallBack($matches) {
                return isset($this->flatConstants[$matches[1]]) ?
$this->flatConstants[$matches[1]] : $matches[0];
        }

}